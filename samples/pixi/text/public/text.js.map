{"version":3,"sources":["../text.fsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oCAoBE,iCApBF;AAAA,kCAuBc,+BAvBd;AAwBA;AAxBA,8BA2BY,qBA3BZ;;AA8BM;AAAY;AAAA;AAAA;AAAA;AAKd;AACF,gCAA6B,8BAA7B;AACA;AACA;AARa;;AA9Bf,wCA0CiB,wDA1CjB;;AA2CA;AA3CA,8BA8CY;AAAA;AAAA;AAAA;AAAA,GA9CZ;AAAA,wCAmDiB,2DAnDjB;AAoDA;AApDA,oCAuDe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAvDf;AAAA,4CA8DmB,oCA9DnB;AA+DA;AACA;AACA;AAjEA,8CAmEoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAnEpB;AAAA,4CA0EmB,+CA1EnB;AA2EA;AACA;AACA;AAEA;AACA;AACA;AAEA,iEAEwB;AAAA;AAAC,GAFzB;;AAnFA,kCAyFc;AAAA;;AAGV;AAAA;AACA,cAAS,WAAT;AAEA,0BAA6B,+CAAR;AAAA;AAAA,SAA6B,iBAA7B,CAArB;AAEA,8BAAyB,4BAAzB;AACA,mCAAkD;AAAA;AAAO,OAAzD;AAAoE,KANpE;;AAHU;AAAK,GAAL,EAzFd;;AAsGA","file":"text.js","sourceRoot":"/Users/alfonsogarciacaronunez/Documents/Github/fable-graphics/samples/pixi/text/public","sourcesContent":["(**\n - title: Text sample\n - tagline: Basic sample implemented with fable-pixi\n - app-style: width:800px; margin:20px auto 50px auto;\n - require-paths: `'PIXI':'https://cdnjs.cloudflare.com/ajax/libs/pixi.js/3.0.11/pixi.min'`\n - intro: This is a port from [text sample](http://pixijs.github.io/examples/#/demos/text-demo.js)\n*)\n\n#r \"../../node_modules/fable-core/Fable.Core.dll\"\n#load \"../../node_modules/fable-import-pixi/Fable.Import.Pixi.fs\"\n\nopen System\nopen Fable.Core\nopen Fable.Core.JsInterop\nopen Fable.Import\nopen Fable.Import.PIXI\nopen Fable.Import.Browser\nopen Fable.Import.JS\n\nlet renderer =\n  Globals.autoDetectRenderer( 800., 600. )\n  |> unbox<SystemRenderer>\n\nlet gameDiv = document.getElementById(\"game\")\ngameDiv.appendChild( renderer.view )\n\n// create the root of the scene graph\nlet stage = Container()\n\nlet onAssetsLoad resources =\n  let fontStyle = [\n    extras.Font (U2.Case1 \"35px Desyrel\")\n    extras.Align \"right\"\n  ]\n  let bitmapFontText =\n    extras.BitmapText(\"bitmap fonts are\\n now supported\", fontStyle)\n  bitmapFontText.position.x <- 600. - bitmapFontText.textWidth\n  bitmapFontText.position.y <- 20.\n  stage.addChild(bitmapFontText)\n  |> ignore\n\n// add a shiny background...\nlet background = Sprite.fromImage(\"./public/assets/textDemoBG.jpg\")\nstage.addChild( background)\n\n// create some white text using the Snippet webfont\nlet style = [\n  TextStyle.Font \"35px Arial\"\n  TextStyle.Fill (U2.Case1 \"white\")\n  TextStyle.Align \"left\"\n]\nlet textSample = PIXI.Text(\"Pixi.js can have\\n multiline text!\", style)\ntextSample.position.set(20.)\n\n// create a text object with a nice stroke\nlet funStyle = [\n  TextStyle.Font \"bold 60px Arial\"\n  TextStyle.Fill (U2.Case1 \"#cc00ff\")\n  TextStyle.Align \"center\"\n  TextStyle.Stroke (U2.Case1 \"#FFFFFF\")\n  TextStyle.StrokeThickness 6.\n]\nlet spinningText = PIXI.Text(\"I\\'m fun!\", funStyle)\nspinningText.anchor.set(0.5)\nspinningText.position.x <- 310.\nspinningText.position.y <- 200.\n\nlet countingStyle = [\n  TextStyle.Font \"bold italic 60px Arial\"\n  TextStyle.Fill (U2.Case1 \"#3e1707\")\n  TextStyle.Align \"center\"\n  TextStyle.Stroke (U2.Case1 \"#a4410e\")\n  TextStyle.StrokeThickness 7.\n]\nlet countingText = PIXI.Text(\"COUNT 4EVAR: 0\", countingStyle)\ncountingText.position.x <- 310.\ncountingText.position.y <- 320.\ncountingText.anchor.x <- 0.5\n\nstage.addChild(textSample)\nstage.addChild(spinningText)\nstage.addChild(countingText)\n\nGlobals.loader\n  .add(\"desyrel\",\"./public/assets/desyrel.xml\")\n  .load(Func<_,_,_>(fun _ resources ->\n    onAssetsLoad(resources)))\n\nlet animate =\n  let mutable count = 0.\n  let rec animate (dt:float) =\n    // render the container\n    renderer.render(stage)\n    count <- count + 0.5\n    // update the text with a new string\n    countingText.text <- sprintf \"COUNT 4EVAR: %.0f\" (Math.floor(count))\n    // let's spin the spinning text\n    spinningText.rotation <- spinningText.rotation + 0.03\n    window.requestAnimationFrame(FrameRequestCallback animate) |> ignore\n  animate\n\n// start animating\nanimate 0.\n"]}