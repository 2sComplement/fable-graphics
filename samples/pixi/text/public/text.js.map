{"version":3,"sources":["../text.fsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oCAoBE,iCApBF;AAAA,kCAuBc,+BAvBd;AAwBA;AAxBA,8BA2BY,qBA3BZ;;AA8BM;AAAY;AAAA;AAAA;AAAA;AAIa;AAC7B,gCAA6B,8BAA7B;AACA;AACA;AAPa;;AA9Bf,wCAwCiB,wDAxCjB;;AAyCA;AAzCA,8BA6CY;AAAA;AAAA;AAAA;AAAA,GA7CZ;AAAA,wCAkDkD,2DAlDlD;AAmDA;AAnDA,oCAuDe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAvDf;AAAA,4CA8DoD,oCA9DpD;AA+DA;AACA;AACA;AAjEA,8CAoEoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GApEpB;AAAA,4CA2EoD,+CA3EpD;AA4EA;AACA;AACA;AAEA;AACA;AACA;AAEA,iEAGI;AAAA;AAAuB,GAH3B;AApFA;;AA8FE;AAAA;AACA,4BAAS,WAAT;AAEA,wBAA6B,6CAAR;AAAA;AAAA,OAAgD,WAArB,iBAAqB,CAAhD,CAArB;AAGA,4BAAyB,4BAAzB;AACA,iCAAkD;AAAA;AAAO,KAAzD;AAAoE;;AAItE","file":"text.js","sourceRoot":"/Users/alfonsogarciacaronunez/Documents/Github/fable-graphics/samples/pixi/text/public","sourcesContent":["(**\n - title: Text sample\n - tagline: Basic sample implemented with fable-pixi\n - app-style: width:800px; margin:20px auto 50px auto;\n - require-paths: `'PIXI':'https://cdnjs.cloudflare.com/ajax/libs/pixi.js/3.0.11/pixi.min'`\n - intro: This is a port from [text sample](http://pixijs.github.io/examples/#/demos/text-demo.js)\n*)\n\n#r \"../../node_modules/fable-core/Fable.Core.dll\"\n#load \"../../node_modules/fable-import-pixi/Fable.Import.Pixi.fs\"\n\nopen System\nopen Fable.Core\nopen Fable.Core.JsInterop\nopen Fable.Import.PIXI\nopen Fable.Import.PIXI.extras\nopen Fable.Import.Browser\nopen Fable.Import.JS\n\nlet renderer =\n  Globals.autoDetectRenderer( 800., 600. )\n  |> unbox<SystemRenderer>\n\nlet gameDiv = document.getElementById(\"game\")\ngameDiv.appendChild( renderer.view )\n\n// create the root of the scene graph\nlet stage = new Container()\n\nlet onAssetsLoad resources =\n  let fontStyle = [\n    Font (U2.Case1 \"35px Desyrel\")\n    Align \"right\"\n  ]\n  let mutable bitmapFontText = new extras.BitmapText(\"bitmap fonts are\\n now supported\", fontStyle)\n  bitmapFontText.position.x <- 600. - bitmapFontText.textWidth\n  bitmapFontText.position.y <- 20.\n  stage.addChild(bitmapFontText)\n\n// add a shiny background...\nlet background = Sprite.fromImage(\"./public/assets/textDemoBG.jpg\")\nstage.addChild( background)\n\n// create some white text using the Snippet webfont\ntype TS = TextStyle\nlet style = [\n  TS.Font \"35px Arial\"\n  TS.Fill (U2.Case1 \"white\")\n  TS.Align \"left\"\n]\nlet mutable textSample : Fable.Import.PIXI.Text = Fable.Import.PIXI.Text(\"Pixi.js can have\\n multiline text!\", style)\ntextSample.position.set(20.)\n\n\n// create a text object with a nice stroke\nlet funStyle = [\n  TS.Font \"bold 60px Arial\"\n  TS.Fill (U2.Case1 \"#cc00ff\")\n  TS.Align \"center\"\n  TS.Stroke (U2.Case1 \"#FFFFFF\")\n  TS.StrokeThickness 6.\n]\nlet mutable spinningText : Fable.Import.PIXI.Text = Fable.Import.PIXI.Text(\"I\\'m fun!\", funStyle)\nspinningText.anchor.set(0.5)\nspinningText.position.x <- 310.\nspinningText.position.y <- 200.\n\n\nlet countingStyle = [\n  TS.Font \"bold italic 60px Arial\"\n  TS.Fill (U2.Case1 \"#3e1707\")\n  TS.Align \"center\"\n  TS.Stroke (U2.Case1 \"#a4410e\")\n  TS.StrokeThickness 7.\n]\nlet mutable countingText : Fable.Import.PIXI.Text = Fable.Import.PIXI.Text(\"COUNT 4EVAR: 0\", countingStyle)\ncountingText.position.x <- 310.\ncountingText.position.y <- 320.\ncountingText.anchor.x <- 0.5\n\nstage.addChild(textSample)\nstage.addChild(spinningText)\nstage.addChild(countingText)\n\nGlobals.loader\n  .add(\"desyrel\",\"./public/assets/desyrel.xml\")\n  .load(System.Func<_,_,_>(fun loader resources ->\n    onAssetsLoad(resources) |> ignore\n  ))\n\nlet mutable count = 0.\n\nlet rec animate (dt:float) =\n  // render the container\n  renderer.render(stage)\n  count <- count + 0.5\n  // update the text with a new string\n  countingText.text <- sprintf \"COUNT 4EVAR: %i\" (Math.floor(count) |> int)\n\n  // let's spin the spinning text\n  spinningText.rotation <- spinningText.rotation + 0.03\n  window.requestAnimationFrame(FrameRequestCallback animate) |> ignore\n\n\n// start animating\nanimate 0.\n"]}