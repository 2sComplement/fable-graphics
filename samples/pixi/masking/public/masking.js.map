{"version":3,"sources":["../masking.fsx"],"names":[],"mappings":";;;;;;;;;AAAA,oCAkBe,iCAlBf;AAAA,kCAoBc,+BApBd;AAqBA;AArBA,8BAwBoB,qBAxBpB;AAyBA;;AAzBA,wBA2BU,sDA3BV;;AA6BA;AACA;AAEA,kBAAiB,kBAAjB;AACA,kBAAiB,mBAAjB;AAEA;AAnCA,sCAqCwB,qBArCxB;AAsCA,yBAAwB,kBAAxB;AACA,yBAAwB,mBAAxB;;AAvCA,kCA2Ce,0DA3Cf;;AA4CA;AACA;AAEA;;AA/CA,gCAiDc,2DAjDd;;AAkDA;AACA;AACA;;AApDA,gCAsDc,2DAtDd;;AAuDA;AACA;AACA;;AAzDA,8BA2Dc,oDA3Dd;;AA4DA;AACA;AAEA;AAEA;AAjEA,8BAoEY,oBApEZ;AAqEA;AACA,qBAAoB,kBAApB;AACA,qBAAoB,mBAApB;AACA;AAEA;AA1EA;;AA+EQ;AAAA;;AAAA,4BAES;AAAA;AAAsB,KAF/B,MACI;AAAA;AAAsC;AAD5B;;AAItB,oBAA2B;AAAA;AAAS,GAApC;AAEA,kBAAyB;AAAA;AAAS,GAAlC;AArFA,8BAuFY;AAAA;AAAA;AAAA,GAvFZ;AAAA,4BA2F4C,wDA3F5C;AA4FA,oBAAmB,oBAAnB;AACA;AACA;;AAKE;AAAA,kBAAe,kBAAf;AACA,uBAAoB,uBAApB;AAEA,sBAAmB,sBAAnB;AACA,sBAAmB,sBAAnB;AAEA,oBAAiB,IAAK,sBAAtB;AACA,oBAAiB,IAAK,sBAAtB;AAEA,4BAAS,WAAT;AAEA;AAOA;AAlBA;AAoBY;AACA;AACZ,iBAAa,YAAb,EAA4B,YAA5B;AACA,iBAAa,YAAb,EAA4B,WAA5B;AACA,iBAAa,WAAb,EAA2B,YAA3B;AACA,iBAAa,WAAb,EAA2B,WAA3B;AACA,iBAAa,YAAb,EAA4B,WAA5B;AACA,iBAAa,YAAb,EAA4B,YAA5B;AACA,iBAAa,YAAb,EAA4B,YAA5B;AACA,qBAAkB,WAAlB;AAEA,iCAAkD;AAAA;AAAO,KAAzD;AACA;AAAsB;;AAGxB","file":"masking.js","sourceRoot":"/Users/alfonsogarciacaronunez/Documents/Github/fable-graphics/samples/pixi/masking/public","sourcesContent":["(**\n - title: Masking sample\n - tagline: Basic sample implemented with fable-pixi\n - app-style: width:800px; margin:20px auto 50px auto;\n - require-paths: `'PIXI':'https://cdnjs.cloudflare.com/ajax/libs/pixi.js/3.0.11/pixi.min'`\n - intro: This is a port from [Masking sample](http://pixijs.github.io/examples/#/demos/masking.js)\n*)\n\n#r \"../../node_modules/fable-core/Fable.Core.dll\"\n#load \"../../node_modules/fable-import-pixi/Fable.Import.Pixi.fs\"\n\nopen System\nopen Fable.Core\nopen Fable.Core.JsInterop\nopen Fable.Import.PIXI\nopen Fable.Import.Browser\nopen Fable.Import.JS\n\nlet renderer = WebGLRenderer( 800., 600. )\n\nlet gameDiv = document.getElementById(\"game\")\ngameDiv.appendChild( renderer.view )\n\n// create the root of the scene graph\nlet mutable stage = new Container()\nstage.interactive <- true\n\nlet bg =  Sprite.fromImage(\"./public/assets/BGrotate.jpg\" )\n\nbg.anchor.x <- 0.5\nbg.anchor.y <- 0.5\n\nbg.position.x <- renderer.width / 2.\nbg.position.y <- renderer.height / 2.\n\nstage.addChild(bg)\n\nlet mutable container = new Container()\ncontainer.position.x <- renderer.width / 2.\ncontainer.position.y <- renderer.height / 2.\n\n// add a bunch of sprites\n\nlet bgFront =  Sprite.fromImage(\" ./public/assets/SceneRotate.jpg\" )\nbgFront.anchor.x <- 0.5\nbgFront.anchor.y <- 0.5\n\ncontainer.addChild(bgFront)\n\nlet light2 =  Sprite.fromImage(\" ./public/assets/LightRotate2.png\" )\nlight2.anchor.x <- 0.5\nlight2.anchor.y <- 0.5\ncontainer.addChild(light2)\n\nlet light1 =  Sprite.fromImage(\" ./public/assets/LightRotate1.png\" )\nlight1.anchor.x <- 0.5\nlight1.anchor.y <- 0.5\ncontainer.addChild(light1)\n\nlet panda =   Sprite.fromImage(\" ./public/assets/panda.png\" )\npanda.anchor.x <- 0.5\npanda.anchor.y <- 0.5\n\ncontainer.addChild(panda)\n\nstage.addChild(container)\n\n// let\" s create a moving shape\nlet thing = new  Graphics()\nstage.addChild(thing)\nthing.position.x <- renderer.width / 2.\nthing.position.y <- renderer.height / 2.\nthing.lineStyle(0.)\n\ncontainer.mask <- Some(U2.Case1 thing)\n\nlet mutable count = 0.\n\nlet onClick() =\n  match container.mask with\n  | None -> container.mask <- Some(U2.Case1 thing)\n  | Some mask -> container.mask <- None\n\nstage?on(\"click\", fun e -> onClick())\n//stage.on_click(fun e -> onClick()) // you can use this too\nstage?on(\"tap\", fun e -> onClick())\n\nlet style = [\n  Font \"bold 12pt Arial\"\n  Fill (U2.Case1 \"white\")\n]\nlet mutable help : Fable.Import.PIXI.Text = new Fable.Import.PIXI.Text(\"Click to turn masking on / off.\", style)\nhelp.position.y <- renderer.height - 26.\nhelp.position.x <- 10.\nstage.addChild(help)\n\nlet rec animate (dt:float) =\n\n\n  bg.rotation <- bg.rotation +  0.01\n  bgFront.rotation <- bgFront.rotation - 0.01\n\n  light1.rotation <- light1.rotation + 0.02\n  light2.rotation <- light2.rotation + 0.01\n\n  panda.scale.x <- 1. + Math.sin(count) * 0.04\n  panda.scale.y <- 1. + Math.cos(count) * 0.04\n\n  count <- count + 0.1\n\n  thing.clear() |> ignore\n\n  (*\n    Version specifics:\n    v3: clipping (you should see some edges blinking)\n    v4: no clipping\n  *)\n  thing.beginFill(float 0x8bc5ff, 0.4)  |> ignore\n  let myangle = 20.\n  let mysin = Math.sin(count) * myangle\n  let mycos = Math.cos(count) * myangle\n  thing.moveTo(-120. + mysin, -100. + mycos) |> ignore\n  thing.lineTo(-320. + mycos, 100. + mysin) |> ignore\n  thing.lineTo(120. + mycos, -100. + mysin) |> ignore\n  thing.lineTo(120. + mysin, 100. + mycos) |> ignore\n  thing.lineTo(-120. + mycos, 100. + mysin) |> ignore\n  thing.lineTo(-120. + mysin, -300. + mycos) |> ignore\n  thing.lineTo(-320. + mysin, -100. + mycos) |> ignore\n  thing.rotation <- count * 0.1\n\n  window.requestAnimationFrame(FrameRequestCallback animate) |> ignore\n  renderer.render(stage)\n\n// start animating\nanimate 0.\n"]}