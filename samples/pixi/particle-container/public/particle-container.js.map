{"version":3,"sources":["../particle-container.fsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oDAkB0D,iCAlB1D;AAAA;AAAA;AAAA,kCA8Bc,+BA9Bd;AA+BA;AA/BA,8BAkCoB,qBAlCpB;AAAA,kCAqCc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GArCd;AAAA,kCA4Cc,2CA5Cd;AA6CA;AA7CA;AAAA,4CAiDmB,qBAjDnB;;AAmDA,uBAAY,gBAAZ,OAEgB;AAAO;;AAKnB;AAGA,mBAAe,MAAM,mBAArB;AAGA,sBAAmB,WAAW,8BAAX,CAAnB;AACA,sBAAmB,WAAW,+BAAX,CAAnB;AAOA,qBAAkB,2BAAlB;AAGA,wBAAqB,mBAArB;AAGA,iBAAc,IAAK,uBAAnB;AAEA,kBAAe,mBAAf;AAGA;AAEA;AAhCgB;;AArDpB;AAAA,wCA2FiB,oBAAc,kBAAd,EACmB,kBADnB,EAEmB,iBAAiB,qBAFpC,EAGmB,kBAAkB,qBAHrC,CA3FjB;AAAA;;AAqGM;AAAK;;AACT,kCACQ;AAAO;AACX,qBAAgB,OAAO,SAAS,kBAAT,QAAvB;AACA,uBAAkB,iBAAgC,wBAAlD;AACA,wBAAmB,kBAAkB,oDAArC;AACA,wBAAmB,kBAAkB,oDAArC;AACA,sBAAiB,yBAAjB;;AAGA,UAAI,8BAAJ,EACK;AAAA,0BAAmB,kCAAnB;AAAqD,OAD1D,MAEA;AAAA,YAAM,kBAAkB,+BAAxB,EACK;AAAA,4BAAmB,kCAAnB;AAAqD;AAAA;;AAE1D,UAAI,8BAAJ,EACK;AAAA,0BAAmB,mCAAnB;AAAsD,OAD3D,MAEA;AAAA,YAAM,kBAAkB,gCAAxB,EACK;AAAA,4BAAmB,mCAAnB;AAAsD;AAAA;AAhBnD;;AAmBZ,0BAAQ,UAAR;AAEA,iCAAkD;AAAA;AAAO,KAAzD;AACA;AAxBM;;AA2BR","file":"particle-container.js","sourceRoot":"/Users/alfonsogarciacaronunez/Documents/Github/fable-graphics/samples/pixi/particle-container/public","sourcesContent":["(**\n - title: Particle Container sample\n - tagline: Basic sample implemented with fable-pixi\n - app-style: width:800px; margin:20px auto 50px auto;\n - require-paths: `'PIXI':'https://cdnjs.cloudflare.com/ajax/libs/pixi.js/3.0.11/pixi.min'`\n - intro: This is a port from [Particle Container sample](http://pixijs.github.io/examples/#/demos/batch-v3.js)\n*)\n\n#r \"../../node_modules/fable-core/Fable.Core.dll\"\n#load \"../../node_modules/fable-import-pixi/Fable.Import.Pixi.fs\"\n\nopen System\nopen Fable.Core\nopen Fable.Core.JsInterop\nopen Fable.Import.PIXI\nopen Fable.Import.Browser\nopen Fable.Import.JS\n\nlet specificRenderer : U2<WebGLRenderer, CanvasRenderer>= Globals.autoDetectRenderer(800., 600.)\n// TODO: uncomment this when Fable 0.5.9 is out since it fails in 0.5.8\n(*\nlet isWebGL =\n  match specificRenderer with\n  | U2.Case1(webgl) -> true\n  | _ -> false\n*)\nlet isWebGL = true\n\nlet renderer = specificRenderer |> unbox<SystemRenderer>\n\nlet gameDiv = document.getElementById(\"game\")\ngameDiv.appendChild( renderer.view )\n\n// create the root of the scene graph\nlet mutable stage = new Container()\n\ntype PCP = ParticleContainerProperties\nlet options = [\n    PCP.Scale true\n    PCP.Position true\n    PCP.Rotation true\n    PCP.Uvs true\n    PCP.Alpha true\n  ]\nlet sprites = new ParticleContainer(10000.,options)\nstage.addChild(sprites)\n\n// create an array to store a reference to the dudes\nlet maggots = ResizeArray<Sprite>()\nlet totalSprites = if isWebGL then 10000 else 100\n\nfor i in 0..totalSprites-1 do\n    // create a new Sprite that uses the image name that we just generated as its source\n    let mutable dude = Sprite.fromImage(\"./public/assets/tinyMaggot.png\")\n\n    // Exists in code but is not used in actual demo: http://pixijs.github.io/examples/#/demos/batch-v3.js\n    //dude.tint <- Math.random() * (float 0xE8D4CD)\n\n    dude.anchor.set(0.5)\n\n    // set a random scale for the dude\n    dude.scale.set(0.8 + Math.random() * 0.3)\n\n    // finally let\"s set the dude to be at a random position...\n    dude.position.x <- Math.floor(Math.random() * renderer.width)\n    dude.position.y <- Math.floor(Math.random() * renderer.height)\n\n    // Exists in code but is not used in actual demo: http://pixijs.github.io/examples/#/demos/batch-v3.js\n    //dude.tint <- Math.random() * (float 0x808080)\n\n    // create some extra properties that will control movement\n    // create a random direction in radians. This is a number between 0 and PI*2 which is the equivalent of 0 - 360 degrees\n    dude?direction <- Math.random() * Math.PI * 2.\n\n    // this number will be used to modify the direction of the dude over time\n    dude?turningSpeed <- Math.random() - 0.8\n\n    // create a random speed between 0 - 2, and these maggots are slooww\n    dude?speed <- 2. + Math.random() * 2. * 0.2\n\n    dude?offset <- Math.random() * 100.\n\n    // finally we push the dude into the maggots so it it can be easily accessed later\n    maggots.Add(dude)\n\n    stage.addChild(dude) |> ignore\n\n\n// create a bounding box box for the little dudes\nlet dudeBoundsPadding = 100.\n\nlet dudeBounds = new Rectangle(-dudeBoundsPadding,\n                                    -dudeBoundsPadding,\n                                    renderer.width + dudeBoundsPadding * 2.,\n                                    renderer.height + dudeBoundsPadding * 2.)\n\nlet mutable tick = 0.\n\nlet rec animate (dt:float) =\n\n  // iterate through the dudes and update the positions\n  let dc = maggots.Count - 1\n  for i in 0..dc do\n      let dude = maggots.[i]\n      dude.scale.y <- 0.95 + Math.sin(tick + (unbox<float> dude?offset)) * 0.05\n      dude?direction <- (unbox<float> dude?direction) + (unbox<float> dude?turningSpeed) * 0.01\n      dude.position.x <- dude.position.x + Math.sin((unbox<float> dude?direction)) * (unbox<float> dude?speed) * dude.scale.y\n      dude.position.y <- dude.position.y + Math.cos((unbox<float> dude?direction)) * (unbox<float> dude?speed) * dude.scale.y\n      dude.rotation <- -(unbox<float> dude?direction) - Math.PI\n\n      // wrap the dudes by testing their bounds...\n      if (dude.position.x < dudeBounds.x)\n      then dude.position.x <- dude.position.x + dudeBounds.width\n      elif (dude.position.x > dudeBounds.x + dudeBounds.width)\n      then dude.position.x <- dude.position.x - dudeBounds.width\n\n      if (dude.position.y < dudeBounds.y)\n      then dude.position.y <- dude.position.y + dudeBounds.height\n      elif (dude.position.y > dudeBounds.y + dudeBounds.height)\n      then dude.position.y <- dude.position.y - dudeBounds.height\n\n  // increment the ticker\n  tick <- tick + 0.1\n\n  window.requestAnimationFrame(FrameRequestCallback animate) |> ignore\n  renderer.render(stage)\n\n// start animating\nanimate 0.\n"]}