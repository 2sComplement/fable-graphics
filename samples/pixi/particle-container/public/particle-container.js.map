{"version":3,"sources":["../particle-container.fsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,wBAmBQ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsC,GAAtC,EAnBR;;AAAA;AAAA;AAAA,kCAuBc,+BAvBd;AAwBA;AAxBA,8BA2BY,qBA3BZ;AAAA,kCA8Bc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GA9Bd;AAAA,kCAqCc,2CArCd;AAsCA;AAtCA;AAAA,4CA0CmB,qBA1CnB;;AA4CA,uBAAY,gBAAZ,OAGQ;AAAO;;AAMX;AAGA,mBAAe,MAAM,mBAArB;AAGA,sBAAmB,WAAW,8BAAX,CAAnB;AACA,sBAAmB,WAAW,+BAAX,CAAnB;AASA,qBAAkB,2BAAlB;AAGA,wBAAqB,mBAArB;AAGA,iBAAc,IAAK,uBAAnB;AAEA,kBAAe,mBAAf;AAGA;AAEA;AAnCQ;;AA/CZ;AAAA,wCAwFiB,oBAAU,kBAAV,EACU,kBADV,EAEU,iBAAiB,qBAF3B,EAGU,kBAAkB,qBAH5B,CAxFjB;;AAAA,kCA8Fc;AAAA;;AAGN;AAAK;;AACT,oCACM;AAAO;AACX,uBACE,OAAO,SAAS,kBAAT,QADT;AAGA,yBACE,iBAAyB,wBAD3B;AAGA,0BACE,kBAAkB,oDADpB;AAIA,0BACE,kBAAkB,oDADpB;AAIA,wBACE,yBADF;;AAIA,YAAI,8BAAJ,EACK;AAAA,4BAAmB,kCAAnB;AAAqD,SAD1D,MAEA;AAAA,cAAM,kBAAkB,+BAAxB,EACK;AAAA,8BAAmB,kCAAnB;AAAqD;AAAA;;AAE1D,YAAI,8BAAJ,EACK;AAAA,4BAAmB,mCAAnB;AAAsD,SAD3D,MAEA;AAAA,cAAM,kBAAkB,gCAAxB,EACK;AAAA,8BAAmB,mCAAnB;AAAsD;AAAA;AA3BnD;;AA8BV,aAAQ,UAAR;AACA,mCAAkD;AAAA;AAAO,OAAzD;AACA;AAlCM,KAAF;;AAHM;AAAI,GAAJ,EA9Fd;;AAwIA","file":"particle-container.js","sourceRoot":"/Users/alfonsogarciacaronunez/Documents/Github/fable-graphics/samples/pixi/particle-container/public","sourcesContent":["(**\n - title: Particle Container sample\n - tagline: Basic sample implemented with fable-pixi\n - app-style: width:800px; margin:20px auto 50px auto;\n - require-paths: `'PIXI':'https://cdnjs.cloudflare.com/ajax/libs/pixi.js/3.0.11/pixi.min'`\n - intro: This is a port from [Particle Container sample](http://pixijs.github.io/examples/#/demos/batch-v3.js)\n*)\n\n#r \"../../node_modules/fable-core/Fable.Core.dll\"\n#load \"../../node_modules/fable-import-pixi/Fable.Import.Pixi.fs\"\n\nopen System\nopen Fable.Core\nopen Fable.Core.JsInterop\nopen Fable.Import.PIXI\nopen Fable.Import.Browser\nopen Fable.Import.JS\n\nlet isWebGL, renderer =\n  match Globals.autoDetectRenderer(800., 600.) with\n  | U2.Case1 webgl -> true, webgl :> SystemRenderer\n  | U2.Case2 canvas -> false, canvas :> SystemRenderer\n\nlet gameDiv = document.getElementById(\"game\")\ngameDiv.appendChild( renderer.view )\n\n// create the root of the scene graph\nlet stage = Container()\n\ntype PCP = ParticleContainerProperties\nlet options = [\n    PCP.Scale true\n    PCP.Position true\n    PCP.Rotation true\n    PCP.Uvs true\n    PCP.Alpha true\n  ]\nlet sprites = ParticleContainer(10000., options)\nstage.addChild(sprites)\n\n// create an array to store a reference to the dudes\nlet maggots = ResizeArray<Sprite>()\nlet totalSprites = if isWebGL then 10000 else 100\n\nfor i in 0..totalSprites-1 do\n    // create a new Sprite that uses the image name\n    // we just generated as its source\n    let dude = Sprite.fromImage(\"./public/assets/tinyMaggot.png\")\n\n    // Exists in code but is not used in actual demo\n    // http://pixijs.github.io/examples/#/demos/batch-v3.js\n    //dude.tint <- Math.random() * (float 0xE8D4CD)\n\n    dude.anchor.set(0.5)\n\n    // set a random scale for the dude\n    dude.scale.set(0.8 + Math.random() * 0.3)\n\n    // finally let\"s set the dude to be at a random position...\n    dude.position.x <- Math.floor(Math.random() * renderer.width)\n    dude.position.y <- Math.floor(Math.random() * renderer.height)\n\n    // Exists in code but is not used in actual demo\n    // http://pixijs.github.io/examples/#/demos/batch-v3.js\n    //dude.tint <- Math.random() * (float 0x808080)\n\n    // create some extra properties that will control movement\n    // create a random direction in radians. This is a number\n    // between 0 and PI*2 which is the equivalent of 0 - 360 degrees\n    dude?direction <- Math.random() * Math.PI * 2.\n\n    // this number will be used to modify the direction of the dude over time\n    dude?turningSpeed <- Math.random() - 0.8\n\n    // create a random speed between 0 - 2, and these maggots are slooww\n    dude?speed <- 2. + Math.random() * 2. * 0.2\n\n    dude?offset <- Math.random() * 100.\n\n    // push the dude into the maggots so it can be easily accessed later\n    maggots.Add(dude)\n\n    stage.addChild(dude) |> ignore\n\n\n// create a bounding box box for the little dudes\nlet dudeBoundsPadding = 100.\n\nlet dudeBounds = Rectangle(-dudeBoundsPadding,\n                           -dudeBoundsPadding,\n                           renderer.width + dudeBoundsPadding * 2.,\n                           renderer.height + dudeBoundsPadding * 2.)\n\nlet animate =\n  let mutable tick = 0.\n  let rec animate (dt:float) =\n    // iterate through the dudes and update the positions\n    let dc = maggots.Count - 1\n    for i in 0..dc do\n      let dude = maggots.[i]\n      dude.scale.y <-\n        0.95 + Math.sin(tick + unbox dude?offset) * 0.05\n      \n      dude?direction <-\n        (unbox dude?direction) + (unbox dude?turningSpeed) * 0.01\n      \n      dude.position.x <-\n        dude.position.x + Math.sin(unbox dude?direction)\n        * (unbox dude?speed) * dude.scale.y\n      \n      dude.position.y <-\n        dude.position.y + Math.cos(unbox dude?direction)\n        * (unbox dude?speed) * dude.scale.y\n      \n      dude.rotation <-\n        -(unbox dude?direction) - Math.PI\n\n      // wrap the dudes by testing their bounds...\n      if (dude.position.x < dudeBounds.x)\n      then dude.position.x <- dude.position.x + dudeBounds.width\n      elif (dude.position.x > dudeBounds.x + dudeBounds.width)\n      then dude.position.x <- dude.position.x - dudeBounds.width\n\n      if (dude.position.y < dudeBounds.y)\n      then dude.position.y <- dude.position.y + dudeBounds.height\n      elif (dude.position.y > dudeBounds.y + dudeBounds.height)\n      then dude.position.y <- dude.position.y - dudeBounds.height\n    \n    // increment the ticker\n    tick <- tick + 0.1\n    window.requestAnimationFrame(FrameRequestCallback animate) |> ignore\n    renderer.render(stage)\n  \n  animate // Return `animate` function with `tick` trapped in a closure\n\n// start animating\nanimate 0.\n"]}