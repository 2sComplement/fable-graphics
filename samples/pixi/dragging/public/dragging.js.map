{"version":3,"sources":["../dragging.fsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oCAmBE,iCAnBF;AAAA,kCAsBc,+BAtBd;AAuBA;AAvBA,8BA0BY,qBA1BZ;;AAAA,kCA4Bc,oDA5Bd;;;;;AAAA,gCA8BK;AAAA;;AAAA;;AAAA;AAAO;;;;6BAGa;AAAA;AAAoB;;;uCAKvC;AAAA;AACA;AACA;AAAqB;;;gCAGrB;AAAA;AACA;AACA;AAAsB;;;kCAGlB;AAAyB;;AAC7B,wBACM;AAAc;AAClB;AACA;AAFe;AAFH;;;0BAdE;AAAA;;AAAA;AAAA;AAAS,SAAT;AAAS;;;0BACP;AAAA;;AAAA;AAAA;AAAS,SAAT;AAAS;;;0BAmBJ;AAAA;;AAAA;AAAA;AAAc,SAAd;AAAc;;;0BAChB;AAAA;;AAAA;AAAA;AAAY,SAAZ;AAAY;;;0BACL;AAAA;;AAAA;AAAA;AAAY,SAAZ;AAAY;;;0BACb;AAAA;;AAAA;AAAA;AAAY,SAAZ;AAAY;;;0BACjB;AAAA;;AAAA;AAAA;AAAc,SAAd;AAAc;;;;;;;;AAG5B;AAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AAPiB;;AAUnB,+BACM;AAAW,uBAAY,mBAAZ;AACA,uBAAY,mBAAZ;AACf;AAFK;;AAKL;AAAA,iCAAkD;AAAA;AAAO,KAAzD;AAEA;AAAsB;;AAExB","file":"dragging.js","sourceRoot":"/Users/alfonsogarciacaronunez/Documents/Github/fable-graphics/samples/pixi/dragging/public","sourcesContent":["(**\n - title: Dragging sample\n - tagline: Basic sample implemented with fable-pixi\n - app-style: width:800px; margin:20px auto 50px auto;\n - require-paths: `'PIXI':'https://cdnjs.cloudflare.com/ajax/libs/pixi.js/3.0.11/pixi.min'`\n - intro: This is a port from [dragging sample](http://pixijs.github.io/examples/#/demos/dragging.js)\n*)\n\n#r \"../../node_modules/fable-core/Fable.Core.dll\"\n#load \"../../node_modules/fable-import-pixi/Fable.Import.Pixi.fs\"\n\nopen System\nopen Fable.Core\nopen Fable.Core.JsInterop\nopen Fable.Import.PIXI\nopen Fable.Import.Browser\nopen Fable.Import.JS\n\nlet renderer =\n  Globals.autoDetectRenderer( 800., 600. )\n  |> unbox<SystemRenderer>\n\nlet gameDiv = document.getElementById(\"game\")\ngameDiv.appendChild( renderer.view )\n\n// create the root of the scene graph\nlet stage = new Container()\n\nlet texture = Texture.fromImage(\"./public/assets/bunny.png\")\n\ntype MyBunny(texture) =\n    inherit Sprite(texture)\n\n    member this.noop() = console.log(\"click\")\n    member this.tap = this.noop\n    member this.click = this.noop\n\n    member this.mousedown(event) =\n      this?data <- event?data\n      this?alpha <- 0.5\n      this?dragging <- true\n\n    member this.mouseup() =\n      this?data <- None\n      this?alpha <- 1.\n      this?dragging <- false\n\n    member this.mousemove() =\n      let isDragging = unbox<bool> this?dragging\n      if isDragging then\n        let newPosition = this?data?getLocalPosition(this?parent)\n        this.position.x <- unbox<float> newPosition?x\n        this.position.y <- unbox<float> newPosition?y\n\n    member this.touchstart = this.mousedown\n    member this.touchend = this.mouseup\n    member this.touchendoutside = this.mouseup\n    member this.mouseupoutside = this.mouseup\n    member this.touchmove = this.mousemove\n\nlet createBunny x y =\n  let mutable bunny = MyBunny(texture)\n  bunny.interactive <- true\n  bunny.buttonMode <- true\n  bunny.anchor.set(0.5)\n  bunny.scale.set(3.)\n  bunny.position.x <- x\n  bunny.position.y <- y\n  stage.addChild(bunny)\n\n\nfor i in 0..9 do\n  let x = float( Math.floor( Math.random() * 800.))\n  let y = float( Math.floor( Math.random() * 600.))\n  createBunny x y |> ignore\n\nlet rec animate (dt:float) =\n  window.requestAnimationFrame(FrameRequestCallback animate) |> ignore\n  // render the container\n  renderer.render(stage)\n\nanimate 0.\n"]}