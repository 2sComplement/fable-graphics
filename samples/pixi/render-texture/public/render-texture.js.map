{"version":3,"sources":["../render-texture.fsx"],"names":[],"mappings":";;;;;;;;AAAA,oCAmBe,iCAnBf;AAAA,kCAqBc,+BArBd;AAsBA;AAtBA,8BAyBY,qBAzBZ;AAAA,8CA2B4B,kEA3B5B;AAAA,gDA4B6B,kEA5B7B;AAAA;AAAA,4CAgC2B,gCAhC3B;AAmCA;AACA;AACA;AAGA;AAxCA,gDA0CqB,qBA1CrB;AA2CA;AACA;AACA;AA7CA;AAAA;AAAA;;AA+DA,gCACc;AAAO,6CAAyB,MAAzB;;AACnB,sBAAmB,yBAAnB;AACA,sBAAmB,yBAAnB;AACA;AACA;AACA;AALgB;;AAhElB;;AA0EE;AAAA,iCAAkD;AAAA;AAAO,KAAzD;AAES;AACT;;AACA,kCACc;AAAO;AACnB,sBAAiB,mBAAjB;AADgB;;AAGlB,4BAAS,YAAT;AARA;AAYA;AACA;AAGA;AAGA,8BAA2B,8BAA3B;AACA,2BAAuB,IAAK,qBAA5B;AAIA;AAGA;AAAsB;;AAExB","file":"render-texture.js","sourceRoot":"/Users/alfonsogarciacaronunez/Documents/Github/fable-graphics/samples/pixi/render-texture/public","sourcesContent":["(**\n - title: Render Texture sample\n - tagline: Basic sample implemented with fable-pixi\n - app-style: width:800px; margin:20px auto 50px auto;\n - require-paths: `'PIXI':'https://cdnjs.cloudflare.com/ajax/libs/pixi.js/3.0.11/pixi.min'`\n - intro: This is a port from [Render texture sample](http://pixijs.github.io/examples/#/demos/render-texture-demo.js)\n*)\n\n#r \"../../node_modules/fable-core/Fable.Core.dll\"\n#load \"../../node_modules/fable-import-pixi/Fable.Import.Pixi.fs\"\n\nopen System\nopen Fable.Core\nopen Fable.Core.JsInterop\nopen Fable.Import.PIXI\nopen Fable.Import.PIXI.extras\nopen Fable.Import.Browser\nopen Fable.Import.JS\n\nlet renderer = WebGLRenderer( 800., 600. )\n\nlet gameDiv = document.getElementById(\"game\")\ngameDiv.appendChild( renderer.view )\n\n// create the root of the scene graph\nlet stage = new Container()\n\nlet mutable renderTexture = RenderTexture( U2.Case2 renderer, renderer.width, renderer.height)\nlet mutable renderTexture2 = RenderTexture( U2.Case2 renderer, renderer.width, renderer.height)\nlet mutable currentTexture = renderTexture\n\n// create a new sprite that uses the render texture we created above\nlet mutable outputSprite = new Sprite(currentTexture)\n\n// align the sprite\noutputSprite.position.x <- 400.\noutputSprite.position.y <- 300.\noutputSprite.anchor.set(0.5)\n\n// add to stage\nstage.addChild(outputSprite)\n\nlet stuffContainer = new Container()\nstuffContainer.position.x <- 400.\nstuffContainer.position.y <- 300.\nstage.addChild(stuffContainer)\n\n// create an array of image ids..\nlet fruits = ResizeArray [|\"./public/assets/spinObj_01.png\";\n  \"./public/assets/spinObj_02.png\";\n  \"./public/assets/spinObj_03.png\";\n  \"./public/assets/spinObj_04.png\";\n  \"./public/assets/spinObj_05.png\";\n  \"./public/assets/spinObj_06.png\";\n  \"./public/assets/spinObj_07.png\";\n  \"./public/assets/spinObj_08.png\"\n|]\nlet fl = fruits.Count\n\n// create an array of items\nlet items = new ResizeArray<Sprite>()\n\n// now create some items and randomly position them in the stuff container\nfor i in 0..19 do\n  let mutable item = Sprite.fromImage(fruits.[i % fl])\n  item.position.x <- Math.random() * 400. - 200.\n  item.position.y <- Math.random() * 400. - 200.\n  item.anchor.set(0.5)\n  stuffContainer.addChild(item) |> ignore\n  items.Add(item)\n\nlet mutable count = 0.\n\nlet rec animate (dt:float) =\n  window.requestAnimationFrame(FrameRequestCallback animate) |> ignore\n\n  let il = items.Count - 1\n  console.log(il)\n  for i in 0..il do\n    let mutable item = items.[i]\n    item.rotation <- item.rotation + 0.1\n\n  count <- count + 0.01\n\n  // swap the buffers ...\n  let temp = renderTexture\n  renderTexture <- renderTexture2\n  renderTexture2 <- temp\n\n  // set the new texture\n  outputSprite.texture <- renderTexture\n\n  // twist this up!\n  stuffContainer.rotation <- stuffContainer.rotation - 0.01\n  outputSprite.scale.set(1. + Math.sin(float count) * 0.2)\n\n  // render the stage to the texture\n  // the 'true' clears the texture before the content is rendered\n  renderTexture2.render(displayObject=stage, clear=false)\n\n  // render the container\n  renderer.render(stage)\n\nanimate 0.\n"]}