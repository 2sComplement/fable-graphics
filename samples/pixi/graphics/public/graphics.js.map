{"version":3,"sources":["../graphics.fsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kCAmBc;AAAA;AAAA,GAnBd;AAAA,oCAwBE,0CAxBF;AAAA,kCA2Bc,+BA3Bd;AA4BA;AA5BA,8BA+BoB,qBA/BpB;AAAA,oCAiCe,oBAjCf;AAoCA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AA1EA,8BA6EoB,oBA7EpB;AA8EA;AACA,qBAAoB,OAApB;AACA,qBAAoB,OAApB;;AAGE;AAAA,uBAAoB,kBAApB,EAAyC,wBAAzC;AACA,oBAAgB,mBAAhB,EAAqC,mBAArC;AACA,2BAAwB,mBAAxB,EAA8C,mBAA9C,EACE,mBADF,EACuB,mBADvB,EAEE,mBAFF,EAEuB,mBAFvB;AAGE;;AAEJ;AAEA,oBAA2B;AAAA;AAAS,GAApC;AAEA,kBAAyB;AAAA;AAAS,GAAlC;AA9FA;;AAoGE;AAAA;AACA,4BAAS,WAAT;AACA;AACA;AACA;AAEA,iBAAa,OAAQ,oBAArB,EAA4C,OAAQ,oBAApD;AACA,iBAAc,MAAO,oBAArB,EAA4C,OAAQ,oBAApD;AACA,iBAAc,MAAO,oBAArB,EAA4C,MAAO,oBAAnD;AACA,iBAAc,OAAQ,oBAAtB,EAA4C,MAAO,oBAAnD;AACA,iBAAc,OAAQ,oBAAtB,EAA6C,OAAQ,oBAArD;AAEA,qBAAkB,WAAlB;AACA,iCAAkD;AAAA;AAAO,KAAzD;AACA;AAAsB;;AAGxB","file":"graphics.js","sourceRoot":"/Users/alfonsogarciacaronunez/Documents/Github/fable-graphics/samples/pixi/graphics/public","sourcesContent":["(**\n - title: Graphics sample\n - tagline: Basic sample implemented with fable-pixi\n - app-style: width:800px; margin:20px auto 50px auto;\n - require-paths: `'PIXI':'https://cdnjs.cloudflare.com/ajax/libs/pixi.js/3.0.11/pixi.min'`\n - intro: This is a port from [graphics sample](http://pixijs.github.io/examples/#/demos/graphics-demo.js)\n*)\n\n#r \"../../node_modules/fable-core/Fable.Core.dll\"\n#load \"../../node_modules/fable-import-pixi/Fable.Import.Pixi.fs\"\n\nopen System\nopen Fable.Core\nopen Fable.Core.JsInterop\nopen Fable.Import.PIXI\nopen Fable.Import.Browser\nopen Fable.Import.JS\n\n\nlet options = [\n  Antialias true\n]\n\nlet renderer =\n  Globals.autoDetectRenderer(800., 600., options)\n  |> unbox<SystemRenderer>\n\nlet gameDiv = document.getElementById(\"game\")\ngameDiv.appendChild( renderer.view )\n\n// create the root of the scene graph\nlet mutable stage = new Container()\n\nlet graphics = new Graphics()\n\n// set a fill and line style\ngraphics.beginFill(float 0xFF3300)\ngraphics.lineStyle(4., float 0xffd900, 1.)\n\n// draw a shape\ngraphics.moveTo(50.,50.)\ngraphics.lineTo(250., 50.)\ngraphics.lineTo(100., 100.)\ngraphics.lineTo(50., 50.)\ngraphics.endFill()\n\n// set a fill and line style again\ngraphics.lineStyle(10., float 0xFF0000, 0.8)\ngraphics.beginFill(float 0xFF700B, 1.)\n\n// draw a second shape\ngraphics.moveTo(210.,300.)\ngraphics.lineTo(450.,320.)\ngraphics.lineTo(570.,350.)\ngraphics.quadraticCurveTo(600., 0., 480.,100.)\ngraphics.lineTo(330.,120.)\ngraphics.lineTo(410.,200.)\ngraphics.lineTo(210.,300.)\ngraphics.endFill()\n\n// draw a rectangle\ngraphics.lineStyle(2., float 0x0000FF, 1.)\ngraphics.drawRect(50., 250., 100., 100.)\n\n// draw a circle\ngraphics.lineStyle(0.)\ngraphics.beginFill(float 0xFFFF0B, 0.5)\ngraphics.drawCircle(470., 200.,100.)\ngraphics.endFill()\n\ngraphics.lineStyle(20., float 0x33FF00)\ngraphics.moveTo(30.,30.)\ngraphics.lineTo(600., 300.)\n\nstage.addChild(graphics)\n\n// let's create a moving shape\nlet mutable thing = new Graphics()\nstage.addChild(thing)\nthing.position.x <- 620. / 2.\nthing.position.y <- 380. / 2.\n\nlet onClick() =\n  graphics.lineStyle( Math.random() * 30., Math.random() * float 0xFFFFFF, 1.) |>ignore\n  graphics.moveTo(Math.random() * 620.,Math.random() * 380.) |>ignore\n  graphics.bezierCurveTo((Math.random() * 620.),Math.random() * 380.,\n    Math.random() * 620.,Math.random() * 380.,\n    Math.random() * 620.,Math.random() * 380.) |> ignore\n  ()\n\nstage.interactive <- true\n// Just click on the stage to draw random lines\nstage?on(\"click\", fun e -> onClick())\n//stage.on_click(fun e -> onClick()) // you can use this too\nstage?on(\"tap\", fun e -> onClick())\n\nlet mutable count = 0.\n\nlet rec animate (dt:float) =\n\n  thing.clear() |> ignore\n  count <- count + 0.1\n  thing.clear() |> ignore\n  thing.lineStyle(10., float 0xff0000, 1.) |> ignore\n  thing.beginFill(float 0xffFF00, 0.5) |> ignore\n\n  thing.moveTo(-120. + Math.sin(count) * 20., -100. + Math.cos(count)* 20.) |> ignore\n  thing.lineTo( 120. + Math.cos(count) * 20., -100. + Math.sin(count)* 20.) |> ignore\n  thing.lineTo( 120. + Math.sin(count) * 20., 100. + Math.cos(count)* 20.) |> ignore\n  thing.lineTo( -120. + Math.cos(count)* 20., 100. + Math.sin(count)* 20.) |> ignore\n  thing.lineTo( -120. + Math.sin(count) * 20., -100. + Math.cos(count)* 20.) |> ignore\n\n  thing.rotation <- count * 0.1\n  window.requestAnimationFrame(FrameRequestCallback animate) |> ignore\n  renderer.render(stage)\n\n// start animating\nanimate 0.\n"]}