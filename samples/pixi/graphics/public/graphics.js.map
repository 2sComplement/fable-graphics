{"version":3,"sources":["../graphics.fsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kCAkBc;AAAA;AAAA,GAlBd;AAAA,oCAuBE,0CAvBF;AAAA,kCA0Bc,+BA1Bd;AA2BA;AA3BA,8BA8BY,qBA9BZ;AAAA,oCAgCe,oBAhCf;AAmCA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAzEA,8BA4EY,oBA5EZ;AA6EA;AACA,qBAAoB,OAApB;AACA,qBAAoB,OAApB;;AAGE;AAAA,uBACE,kBADF,EACuB,wBADvB;AAEA,oBACE,mBADF,EACwB,mBADxB;AAEA,2BACE,mBADF,EACwB,mBADxB,EAEE,mBAFF,EAEwB,mBAFxB,EAGE,mBAHF,EAGwB,mBAHxB;AAGuD;;AAEzD;oBAEmB;AAAA;AAAC,G;kBACH;AAAA;AAAC,G;;AA9FlB,kCAiGc;AAAA;;AAEV;AAAA;AACA,cAAS,WAAT;AACA;AACA;AACA;AACA,mBACE,OAAQ,oBADV,EAEE,OAAQ,oBAFV;AAGA,mBACE,MAAO,oBADT,EAEE,OAAQ,oBAFV;AAGA,mBACE,MAAO,oBADT,EAEE,MAAO,oBAFT;AAGA,mBACE,OAAQ,oBADV,EAEE,MAAO,oBAFT;AAGA,mBACE,OAAQ,oBADV,EAEE,OAAQ,oBAFV;AAGA,uBAAkB,WAAlB;AACA,mCAAkD;AAAA;AAAO,OAAzD;AACA;AAAsB,KAtBtB;;AAFU;AAAK,GAAL,EAjGd;;AA6HA","file":"graphics.js","sourceRoot":"/Users/alfonsogarciacaronunez/Documents/Github/fable-graphics/samples/pixi/graphics/public","sourcesContent":["(**\n - title: Graphics sample\n - tagline: Basic sample implemented with fable-pixi\n - app-style: width:800px; margin:20px auto 50px auto;\n - require-paths: `'PIXI':'https://cdnjs.cloudflare.com/ajax/libs/pixi.js/3.0.11/pixi.min'`\n - intro: This is a port from [graphics sample](http://pixijs.github.io/examples/#/demos/graphics-demo.js)\n*)\n\n#r \"../../node_modules/fable-core/Fable.Core.dll\"\n#load \"../../node_modules/fable-import-pixi/Fable.Import.Pixi.fs\"\n\nopen System\nopen Fable.Core\nopen Fable.Core.JsInterop\nopen Fable.Import.PIXI\nopen Fable.Import.Browser\nopen Fable.Import.JS\n\nlet options = [\n  Antialias true\n]\n\nlet renderer =\n  Globals.autoDetectRenderer(800., 600., options)\n  |> unbox<SystemRenderer>\n\nlet gameDiv = document.getElementById(\"game\")\ngameDiv.appendChild( renderer.view )\n\n// create the root of the scene graph\nlet stage = Container()\n\nlet graphics = Graphics()\n\n// set a fill and line style\ngraphics.beginFill(float 0xFF3300)\ngraphics.lineStyle(4., float 0xffd900, 1.)\n\n// draw a shape\ngraphics.moveTo(50.,50.)\ngraphics.lineTo(250., 50.)\ngraphics.lineTo(100., 100.)\ngraphics.lineTo(50., 50.)\ngraphics.endFill()\n\n// set a fill and line style again\ngraphics.lineStyle(10., float 0xFF0000, 0.8)\ngraphics.beginFill(float 0xFF700B, 1.)\n\n// draw a second shape\ngraphics.moveTo(210.,300.)\ngraphics.lineTo(450.,320.)\ngraphics.lineTo(570.,350.)\ngraphics.quadraticCurveTo(600., 0., 480.,100.)\ngraphics.lineTo(330.,120.)\ngraphics.lineTo(410.,200.)\ngraphics.lineTo(210.,300.)\ngraphics.endFill()\n\n// draw a rectangle\ngraphics.lineStyle(2., float 0x0000FF, 1.)\ngraphics.drawRect(50., 250., 100., 100.)\n\n// draw a circle\ngraphics.lineStyle(0.)\ngraphics.beginFill(float 0xFFFF0B, 0.5)\ngraphics.drawCircle(470., 200.,100.)\ngraphics.endFill()\n\ngraphics.lineStyle(20., float 0x33FF00)\ngraphics.moveTo(30.,30.)\ngraphics.lineTo(600., 300.)\n\nstage.addChild(graphics)\n\n// let's create a moving shape\nlet thing = Graphics()\nstage.addChild(thing)\nthing.position.x <- 620. / 2.\nthing.position.y <- 380. / 2.\n\nlet onClick() =\n  graphics.lineStyle(\n    Math.random() * 30., Math.random() * float 0xFFFFFF, 1.) |>ignore\n  graphics.moveTo(\n    Math.random() * 620., Math.random() * 380.) |>ignore\n  graphics.bezierCurveTo(\n    Math.random() * 620., Math.random() * 380.,\n    Math.random() * 620., Math.random() * 380.,\n    Math.random() * 620., Math.random() * 380.) |> ignore\n\nstage.interactive <- true\n// Just click on the stage to draw random lines\nstage.on_click(fun _ -> onClick())\nstage.on_tap(fun _ -> onClick())\n\nlet animate =\n  let mutable count = 0.\n  let rec animate (dt:float) =\n    thing.clear() |> ignore\n    count <- count + 0.1\n    thing.clear() |> ignore\n    thing.lineStyle(10., float 0xff0000, 1.) |> ignore\n    thing.beginFill(float 0xffFF00, 0.5) |> ignore\n    thing.moveTo(\n      -120. + Math.sin(count) * 20.,\n      -100. + Math.cos(count)* 20.) |> ignore\n    thing.lineTo(\n      120. + Math.cos(count) * 20.,\n      -100. + Math.sin(count)* 20.) |> ignore\n    thing.lineTo(\n      120. + Math.sin(count) * 20.,\n      100. + Math.cos(count)* 20.) |> ignore\n    thing.lineTo(\n      -120. + Math.cos(count)* 20.,\n      100. + Math.sin(count)* 20.) |> ignore\n    thing.lineTo(\n      -120. + Math.sin(count) * 20.,\n      -100. + Math.cos(count)* 20.) |> ignore\n    thing.rotation <- count * 0.1\n    window.requestAnimationFrame(FrameRequestCallback animate) |> ignore\n    renderer.render(stage)\n  animate\n\n// start animating\nanimate 0.\n"]}